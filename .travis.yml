language: generic
branches:
    except:
        - arve2
env:
    global:
        - ENCRYPTION_LABEL: "d0a57c2d09c2"
        - COMMIT_AUTHOR_EMAIL: "philipp.sommer@unil.ch"
        - BUILD_DOCS: false
        - ONLINE_TESTS: false
matrix:
    include:
        - env: BUILD_DOCS=true
               PYTHON_VERSION=2.7
               ONLINE_TESTS=true
          os: linux
        - env: PYTHON_VERSION=3.6
          os: linux
        - env: PYTHON_VERSION=2.7
          os: osx
        - env: PYTHON_VERSION=3.6
          os: osx
services:
    - postgresql
addons:  # install gfortran
    apt:
        packages:
        - gfortran
before_install:
    - "brew install gcc || :"
install:
    # select the os name for the conda installer
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          OS_NAME=MacOSX;
      else
          OS_NAME=Linux;
      fi
    # We do this conditionally because it saves us some downloading if the
    # version is the same.
    - if [[ "$PYTHON_VERSION" == "2.7" ]]; then
          wget https://repo.continuum.io/miniconda/Miniconda2-latest-"${OS_NAME}"-x86_64.sh -O miniconda.sh;
      else
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-"${OS_NAME}"-x86_64.sh -O miniconda.sh;
      fi
    # set build_docs to the real value
    - if [[  "$BUILD_DOCS" == "true" && "$TRAVIS_PULL_REQUEST" == "false" && ("$TRAVIS_BRANCH" == "master" || "$TRAVIS_TAG" != "") ]]; then
          export BUILD_DOCS="true";
      else
          export BUILD_DOCS="false";
      fi
    - echo "$BUILD_DOCS"
    # make sure we use an 'innocent' default matplotlib environment
    - touch matplotlibrc
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - pip install pyyaml  # is somehow not included in the current conda installation
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    # Useful for debugging any issues with conda
    - conda info -a
    # install the conda constructor for releases
    - conda install -n root constructor conda-build six
    - conda install -c conda-forge numpy
    - conda env create -f ci/environment.yml
    - source activate test
    - if [[ "$PYTHON_VERSION" == "2.7" ]]; then
          pip install pathlib;
      fi
    # avoid docrep 0.2.0
    - if [[ `python -c "import docrep; print(docrep.__version__)"` == 0.2.0]]; then
          conda install -c conda-forge --force docrep<0.2.0
      fi
    - pip install coveralls pytest
    - python setup.py install
    # build conda recipe
    - python ci/recipe_from_setup.py `pwd` ci/recipe
    - # prepare constructor files
    - conda config --add channels chilipp
    - conda config --add channels conda-forge
    - if [[ $TRAVIS_TAG == '' ]]; then
          export PKG_VERSION=0.01;
      else
          export PKG_VERSION=${TRAVIS_TAG:1};
      fi
    - export ARGS="-v $PKG_VERSION"
    # build the recipe and prepare the constructor files
    - python ci/prepare_constructor_files.py ci/recipe/gwgen $ARGS -n test
    - cat gwgen-conda/construct.yaml
    # install necessary module for the documentation and clone the existing
    # gh-pages for this repo into the *deploy* folder and clear everything
    - export REPO="$(git config remote.origin.url)"
    - if [[ "$BUILD_DOCS" == "true" ]]; then
          pip install sphinx-fortran sphinx==1.3.5 sphinx_rtd_theme ipython sphinx-argparse==0.1.17 autodocsumm;
          git clone "$REPO" deploy;
          cd deploy;
          git checkout "gh-pages" || git checkout --orphan "gh-pages";
          ls -ad  * .* | grep -v ".git$" | grep -v "^\.$" | grep -v "^\.\.$" | xargs rm -r;
          touch .nojekyll;
          cd ..;
      fi
    # export the environment for debugging
    - conda env export -n test

script:
    - gwgen -h
    # run test suite
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          coverage run --parallel-mode --concurrency=multiprocessing setup.py test -a "-v --serial -m 'not fullrun and not long' -k 'not test_parameterization' --user postgres --offline";
      elif [[ "$ONLINE_TESTS" == "true" ]]; then
          coverage run --parallel-mode --concurrency=multiprocessing setup.py test -a "-v --nprocs 2 -m 'not fullrun' --user postgres";
      else
          coverage run --parallel-mode --concurrency=multiprocessing setup.py test -a "-v --nprocs 2 -m 'not fullrun' --user postgres --offline";
      fi
    # build docs
    - if [[ "$BUILD_DOCS" == "true" ]]; then
          cd docs;
          sphinx-build . ../deploy;
          cd ..;
      fi
    # construct conda environment for releases
    - constructor gwgen-conda &&
      echo "Testing executable" &&
      NO_GWGEN_ALIAS=1 bash `ls gwgen-conda-*.sh` -b -p $HOME/gwgen-conda &&
      $HOME/gwgen-conda/bin/gwgen -h
    - if [[ "$TRAVIS_TAG" != "" && "$BUILD_DOCS" == "true" ]]; then
          cd deploy && zip -r "../gwgen_docs_${TRAVIS_TAG}.zip" . -x *.git* && cd ..;
      fi

after_success:
    - coverage combine && coveralls

before_deploy:
    - if [[ "$TRAVIS_TAG" != "" ]]; then
          ORIG_FILE=$(ls gwgen-conda-*.sh);
          export FINAL_FILE="${ORIG_FILE%.sh}_${PYTHON_VERSION}.sh";
          mv "$ORIG_FILE" "$FINAL_FILE";
      fi

deploy:
    - provider: releases
      user: Chilipp
      api_key:
          secure: WsnYoYvjRetkH0CTMiGG1DjeOc/v0nhPteTDnb9I3K0IFh+Vvv2ZrJlJwUnrVh1ETu4CslJTLihq+VuiMEFeLNW+GLrG5dy4oI8U1A8cTjPSqAEMiVer8nGNcZdRoLfFHH0l17yShrGmXEcQ/1UibshQmqsLo1m2RNmSZHVNain4ImO6bXE6wXasS9oIgx45S8e1rg3poXjLDjN5OjF3W4Fz1cetWWWaAfBJ662GLI8oF7vvd2nI7P9fcMjqfD3tMJl9pecw7Qi8KSdo1FoLM1v7qFPt0T1gW7z8r+7kyzNaeYYCgllLXndA/nKyDRZJWSfUN/Oh0eshcwBGnpWvKxOk2oFLO9qhc1VIAOHn5K1KQJRrnowFFTR4U7MhDWk16bg1ytw2QB7/M+ALxcfbj+X8QzAfrDg7LO8FLHV5oIMHeA20KmVMPz5wxltu0AXlfRWg51HasVI46BJpMQ2uDO0tOrELSZ2Dg7ntETRw5AprZUCjd+lmWoxQ5yM6QilnWjDGk2uNbVrIavceEKI8jBzI2RcKpdc2o+j6H3cTAnu51A7bfU+Two44iY4w0kJ8v3JUiY4joCK/gpFZBRGO1HBmcnz3x/uSteyHbxd9RSEATRKoJx6jR2tk7qZROlaBHvCR8edn4UyPJ3cc1rm+U1FTaRk/0Qj+y9jpQzRo7YE=
      file: "${FINAL_FILE}"
      skip_cleanup: true
      overwrite: true
      on:
          tags: true
    - provider: releases
      user: Chilipp
      api_key:
          secure: WsnYoYvjRetkH0CTMiGG1DjeOc/v0nhPteTDnb9I3K0IFh+Vvv2ZrJlJwUnrVh1ETu4CslJTLihq+VuiMEFeLNW+GLrG5dy4oI8U1A8cTjPSqAEMiVer8nGNcZdRoLfFHH0l17yShrGmXEcQ/1UibshQmqsLo1m2RNmSZHVNain4ImO6bXE6wXasS9oIgx45S8e1rg3poXjLDjN5OjF3W4Fz1cetWWWaAfBJ662GLI8oF7vvd2nI7P9fcMjqfD3tMJl9pecw7Qi8KSdo1FoLM1v7qFPt0T1gW7z8r+7kyzNaeYYCgllLXndA/nKyDRZJWSfUN/Oh0eshcwBGnpWvKxOk2oFLO9qhc1VIAOHn5K1KQJRrnowFFTR4U7MhDWk16bg1ytw2QB7/M+ALxcfbj+X8QzAfrDg7LO8FLHV5oIMHeA20KmVMPz5wxltu0AXlfRWg51HasVI46BJpMQ2uDO0tOrELSZ2Dg7ntETRw5AprZUCjd+lmWoxQ5yM6QilnWjDGk2uNbVrIavceEKI8jBzI2RcKpdc2o+j6H3cTAnu51A7bfU+Two44iY4w0kJ8v3JUiY4joCK/gpFZBRGO1HBmcnz3x/uSteyHbxd9RSEATRKoJx6jR2tk7qZROlaBHvCR8edn4UyPJ3cc1rm+U1FTaRk/0Qj+y9jpQzRo7YE=
      file: "gwgen_docs_${TRAVIS_TAG}.zip"
      skip_cleanup: true
      overwrite: true
      on:
          tags: true
          condition: "$BUILD_DOCS == true"
    # upload the documentation on master branch
    - provider: script
      script: ci/deploy.sh
      skip_cleanup: true
      on:
          branch: master
          condition: "$BUILD_DOCS == true"
